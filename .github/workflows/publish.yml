name: Publish Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      target:
        description: 'Publish target'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi

jobs:
  build-and-publish:
    name: ðŸ“¦ Build and Publish
    runs-on: ubuntu-latest
    environment:
      # Use pypi environment for tag pushes, or the selected target for manual runs
      name: ${{ startsWith(github.ref, 'refs/tags/') && 'pypi' || github.event.inputs.target }}
      url: ${{ startsWith(github.ref, 'refs/tags/') && 'https://pypi.org/p/gitbridge' || (github.event.inputs.target == 'testpypi' && 'https://test.pypi.org/p/gitbridge' || 'https://pypi.org/p/gitbridge') }}
    permissions:
      id-token: write  # Required for trusted publishing
      contents: write  # Required for uploading release assets
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper versioning
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Build distribution
        run: |
          echo "Building distribution packages..."
          uv build
          
          echo ""
          echo "=== Build artifacts ==="
          ls -la dist/
          
          echo ""
          echo "=== Package metadata ==="
          pip install pkginfo
          python -c "from pkginfo import Wheel; import glob; w = Wheel(glob.glob('dist/*.whl')[0]); print(f'Package: {w.name}\\nVersion: {w.version}\\nPython: {w.requires_python}')"
      
      - name: Publish to TestPyPI
        if: github.event.inputs.target == 'testpypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true
          skip-existing: true  # Don't fail if version already exists
      
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.target == 'pypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Creating GitHub release for version $VERSION"
          
          # Extract changelog for this version (if exists)
          CHANGELOG_BODY=""
          if [ -f "docs/changelog.md" ]; then
            echo "Extracting changelog for version $VERSION..."
            # Try to extract the section for this version from changelog
            CHANGELOG_BODY=$(awk '/^## '$VERSION'/{flag=1; next} /^## v[0-9]/{flag=0} flag' docs/changelog.md 2>/dev/null || echo "")
          fi
          
          # Create release body
          if [ -n "$CHANGELOG_BODY" ]; then
            cat > release_notes.md << EOF
          ## What's Changed
          
          $CHANGELOG_BODY
          
          ## Installation
          
          \`\`\`bash
          pip install gitbridge==$VERSION
          \`\`\`
          
          For more details, see the [full changelog](https://github.com/nevedomski/gitbridge/blob/main/docs/changelog.md).
          EOF
          else
            cat > release_notes.md << EOF
          ## Installation
          
          \`\`\`bash
          pip install gitbridge==$VERSION
          \`\`\`
          
          ## Documentation
          
          - [Getting Started](https://nevedomski.github.io/gitbridge/getting-started/)
          - [User Guide](https://nevedomski.github.io/gitbridge/user-guide/)
          - [API Reference](https://nevedomski.github.io/gitbridge/api/)
          EOF
          fi
          
          # Create the release
          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=false \
            dist/*
          
          echo ""
          echo "âœ… GitHub release created successfully"
          echo "View release: https://github.com/nevedomski/gitbridge/releases/tag/$VERSION"
      
      - name: Show installation instructions
        run: |
          echo ""
          echo "ðŸ“¦ Installation Instructions:"
          echo "=============================="
          if [[ "${{ github.event.inputs.target }}" == "testpypi" ]]; then
            echo "To install from TestPyPI:"
            echo "  pip install -i https://test.pypi.org/simple/ gitbridge"
            echo ""
            echo "With extras:"
            echo "  pip install -i https://test.pypi.org/simple/ gitbridge[browser]"
          else
            echo "To install from PyPI:"
            echo "  pip install gitbridge"
            echo ""
            echo "With extras:"
            echo "  pip install gitbridge[browser]"
            echo ""
            echo "For development:"
            echo "  pip install gitbridge[dev]"
          fi