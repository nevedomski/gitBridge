name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    name: 🧪 Tests (Python ${{ matrix.python }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
            ~/AppData/Local/uv/cache
          key: ${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python }}-
            ${{ runner.os }}-
      
      - name: Install uv (universal installer)
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv sync --all-extras
              
      - name: 🔬 Unit tests with coverage
        id: tests
        shell: bash
        # DOCDEV-NOTE: continue-on-error ensures coverage is uploaded even when tests fail
        # This is critical for tracking coverage trends during development
        continue-on-error: true  # Allow workflow to continue even if tests fail
        run: |
          # Run platform-specific tests based on the OS
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # On Windows, run all tests including Windows-specific ones
            uv run pytest --cov=src/gitbridge --cov-report=xml --cov-report=term --junitxml=junit.xml -o junit_family=legacy
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            # On Linux, skip Windows-specific tests
            uv run pytest --cov=src/gitbridge --cov-report=xml --cov-report=term --junitxml=junit.xml -o junit_family=legacy -m "not windows"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # On macOS, skip Windows-specific tests
            uv run pytest --cov=src/gitbridge --cov-report=xml --cov-report=term --junitxml=junit.xml -o junit_family=legacy -m "not windows"
          else
            # Fallback - skip Windows-specific tests
            uv run pytest --cov=src/gitbridge --cov-report=xml --cov-report=term --junitxml=junit.xml -o junit_family=legacy -m "not windows"
          fi

      - name: 📊 Upload coverage to Codecov
        # DOCDEV-TODO: Monitor Codecov test analytics for flaky test detection
        if: always()  # Always run, even if tests fail
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # More reliable uploads with token
          files: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python }}
          fail_ci_if_error: false  # Don't fail CI if upload fails
          verbose: true
          env_vars: OS,PYTHON
        env:
          OS: ${{ matrix.os }}
          PYTHON: ${{ matrix.python }}
      
      - name: 📈 Upload test results to Codecov
        if: always()  # Always run, even if tests fail
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # More reliable uploads with token
          files: ./junit.xml
          flags: test-results
          name: test-results-${{ matrix.os }}-py${{ matrix.python }}
          fail_ci_if_error: false
          verbose: true
      
      - name: Check test results
        if: steps.tests.outcome == 'failure'
        run: |
          echo "Tests failed but coverage was uploaded successfully"
          exit 1

  lint:
    name: 🧹 Lint & Typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
            
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
          key: ${{ runner.os }}-uv-lint-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-lint-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --all-extras
      
      - name: 🛑 Ruff check
        uses: astral-sh/ruff-action@v3 # Use the official action
        with:
          args: "check --select F,E" # Pass the args to ruff check

      # --- Ruff "format" check (no diffs allowed)
      - name: 🎨 Ruff format
        uses: astral-sh/ruff-action@v3 # Use the official action
        with:
          args: "format --check --diff" # Pass the args to ruff format

      # --- MyPy type‐check
      - name: 📐 MyPy
        run: uv run mypy src/

  security:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: uv sync --all-extras
      
      - name: 🔍 Run safety check
        run: |
          uv add --dev safety
          uv run safety check --json
        continue-on-error: true

  sync-requirements:
    name: 📋 Sync Requirements File
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Generate requirements.txt
        run: |
          # Generate requirements.txt from pyproject.toml for Snyk compatibility
          uv pip compile pyproject.toml -o requirements.txt
          
          # Add header comment
          echo "# Auto-generated from pyproject.toml by GitHub Actions" > requirements.tmp
          echo "# This file is maintained automatically for Snyk vulnerability scanning" >> requirements.tmp
          echo "# Do not edit manually - edit pyproject.toml instead" >> requirements.tmp
          echo "" >> requirements.tmp
          cat requirements.txt >> requirements.tmp
          mv requirements.tmp requirements.txt
      
      - name: Check for changes
        id: check_changes
        run: |
          # Check if file is new (untracked) or modified
          git add requirements.txt
          if git diff --cached --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected in requirements.txt"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected in requirements.txt"
          fi
      
      - name: Commit and push if changed
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "chore: update requirements.txt from pyproject.toml [skip ci]"
          git push

  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: [tests, lint]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Build package
        run: |
          uv build
          echo "=== Build artifacts ==="
          ls -la dist/
          echo ""
          echo "=== Wheel metadata ==="
          pip install pkginfo
          python -c "from pkginfo import Wheel; import glob; w = Wheel(glob.glob('dist/*.whl')[0]); print(f'Name: {w.name}\nVersion: {w.version}\nPython: {w.requires_python}')"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  test-wheel:
    name: 🎯 Test Wheel (${{ matrix.os }}, Python ${{ matrix.python-version }})
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Test wheel installation
        shell: bash
        run: |
          # Install the wheel
          WHEEL_FILE=$(ls dist/*.whl | head -1)
          echo "Installing: $WHEEL_FILE"
          pip install "$WHEEL_FILE"
          
          # Test basic functionality
          gitbridge --version
          python -c "import gitbridge; print(f'GitBridge {gitbridge.__version__} imported')"
          
          # Show installed deps
          echo "=== Installed packages ==="
          pip list | grep -E "gitbridge|pypac|wincertstore|pywin32" || true
      
      - name: Verify Windows dependencies (Windows only)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "=== Testing Windows dependencies ==="
          python -c "import pypac, wincertstore, win32api; print('[OK] Windows deps installed')"
      
      - name: Verify NO Windows dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "=== Verifying no Windows dependencies ==="
          pip list | grep -E "pypac|wincertstore|pywin32" && exit 1 || echo "[OK] No Windows deps (correct)"
      
      - name: Test browser extra
        shell: bash
        run: |
          WHEEL_FILE=$(ls dist/*.whl | head -1)
          pip install "${WHEEL_FILE}[browser]"
          python -c "import playwright; print('[OK] Playwright installed')"

  publish-testpypi:
    name: 🧪 Publish to TestPyPI
    # Only publish from main branch, not from PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, test-wheel]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/gitbridge
    permissions:
      id-token: write  # For trusted publishing
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          skip-existing: true  # Don't fail if version exists